# Todo

### Important

- .replace() on a node that allow to replace *in place* a node with new fst
  (via string, dict/list or redbaron node)
- maybe magic in NodeList on setattr to call .replace() on backend (kinda make sens but is a bit magic)
- .indent() to change indentation of a block of nodes (.indent(+4), .indent(-4))

### Find/Find_All (comparison)

Can use:
- regex: re.compile
- regex: "re:..."
- callable: lambda

### Generic append\_stuff that take care of the delimiter:

Need: DotList, CommaList, EndlList (.append\_item, .extend, +=)

More general things to do:
- append\_comma doesn't handle the correct delimiter, only takes a comma,
  doesn't takes if their is a space before the comma
- in reality, needs a extend, not an append
- need a specific behavior for Atomtrailer that combine comma/dot/nothing

CommaList need to be done:
* import
* from import
* print
* global
* exec
* with
* subscript list ?
* for a, b, c in ... (comprehension aussi)

### ProxyList

A more sensible approach to those delimiters stuff would be to have ProxyList
that handle separation in the back so you don't have to care about it. This
would be the wrapper arround something like what .filtered is returning right
now. It should implement every expected method of a list (.sort, .extend, .remove, .append etc...).

### More general stuff

* .assign, .map\_concat
* __setitem__ on NodeList

### Misc

* delegate .filtered on the value if the value is a NodeList? Can quickly become magic behavior
